-- 패턴과 랭크2의 와꾸를 혼합하여 분석한다.
DROP FUNCTION IF EXISTS rank_ext_metric_monthly_norm3f_12 (VARCHAR(10), VARCHAR(8), VARCHAR(8));
CREATE OR REPLACE FUNCTION rank_ext_metric_monthly_norm3f_12 (
paramDescription VARCHAR(10),
paramFromYmd VARCHAR(8),
paramToYmd VARCHAR(8)
) RETURNS VOID AS $$
  DECLARE
    rec RECORD;
    days int;
    months int;
    paramRankType VARCHAR(10);
  BEGIN
    paramRankType := 'norm3f_12';
    
	-- 기간안의 날짜수
	months := 30;
	
	-- 패턴/승식/구미방별/월별통계
	raise info 'insert rank_ext_monthly';
	delete from rank_ext_monthly where description = paramDescription and ranktype = paramRankType;
	insert into rank_ext_monthly
	select 
	  description, 
	  bettype, 
	  bet_kumiban,
	  pattern, 
	  paramRankType,
	  substring(predict_rank123 from 1 for 2) waku, 
	  substring(ymd from 1 for 6) ym,
	  sum(1) betcnt,
	  sum(hity) hitcnt,
	  sum(betamt) betamt,
	  sum(hitamt) hitamt,
	  sum(hitamt) - sum(betamt) incomeamt, 
	  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
	  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
	  cast( sum(betamt) / months as int) monthly_betamt,
	  cast( sum(hitamt) / months as int) monthly_hitamt,
	  cast( sum(hitamt) / months as int) - cast( sum(betamt) / months as int) monthly_incomeamt
	from rank_result
	where description = paramDescription
	  and bettype = '3F'
	  and ymd >= paramFromYmd and ymd <= paramToYmd 
	group by description, bettype, bet_kumiban, pattern, waku, ym
	order by description, bettype, bet_kumiban, pattern, waku, ym;
	
	-- 통계 메트릭정보
	raise info 'insert rank_ext_metric_monthly';
	delete from rank_ext_metric_monthly where description = paramDescription and ranktype = paramRankType;
	insert into rank_ext_metric_monthly
	select
	  description,
	  bettype, 
	  bet_kumiban,
	  pattern, 
	  ranktype, 
	  waku, 
	  avg(betcnt)::int avg_betcnt,
	  avg(hitcnt)::int avg_hitcnt,
	  avg(betamt)::int avg_betamt,
	  min(betamt)::int min_betamt,
	  max(betamt)::int max_betamt,
	  avg(hitamt)::int avg_hitamt,
	  min(hitamt)::int min_hitamt,
	  max(hitamt)::int max_hitamt,
	  avg(incomeamt)::int avg_incomeamt,
	  min(incomeamt)::int min_incomeamt,
	  max(incomeamt)::int max_incomeamt,
	  avg(hitrate)::numeric(7,2) avg_hitrate,
	  min(hitrate)::numeric(7,2) min_hitrate,
	  max(hitrate)::numeric(7,2) max_hitrate,
	  stddev_pop(hitrate)::numeric(7,2) dev_hitrate,
	  avg(incomerate)::numeric(7,2) avg_incomerate,
	  min(incomerate)::numeric(7,2) min_incomerate,
	  max(incomerate)::numeric(7,2) max_incomerate,
	  stddev_pop(incomerate)::numeric(7,2) dev_incomerate
	from rank_ext_monthly
	where description = paramDescription and ranktype = paramRankType
	group by description, bettype, bet_kumiban, pattern, ranktype, waku
	order by description, bettype, bet_kumiban, pattern, ranktype, waku;
	
  END;
$$ LANGUAGE plpgsql;


select rank_ext_metric_monthly_norm3f_12('0003', '20170801', '20171231');

select count(*) from rank_ext_metric_monthly where ranktype = 'norm3f_12';

